import PdfPrinter from 'pdfmake';
import blobStream from 'blob-stream';
import { fonts, getLogo } from '$lib/server/pdf/config/pdfConfig';

import type { RequestEvent } from '@sveltejs/kit';
import type { TDocumentDefinitions, Content, Alignment, StyleDictionary } from 'pdfmake/interfaces';
import type { RfsReportData } from '../types/rfs';

interface RfsPropertyReportParams {
	propertyData: RfsReportData[];
	generatedBy: string;
	fetch: RequestEvent['fetch'];
}

export async function generateRfsPropertyReport({
	propertyData,
	generatedBy,
	fetch
}: RfsPropertyReportParams): Promise<Blob> {
	const printer = new PdfPrinter(fonts);
	// const content = buildReportContent(propertyData);
	const styles = getReportStyles();

	const documentDefinition: TDocumentDefinitions = {
		footer: (currentPage: number, pageCount: number) => ({
			columns: [
				{
					text: 'Strengthen Our Community',
					style: 'footer',
					alignment: 'left',
					width: '*'
				},
				{
					text: `Generated by: ${generatedBy} | Page ${currentPage} of ${pageCount}`,
					style: 'footer',
					alignment: 'center',
					width: '*'
				},
				{
					text: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,
					style: 'footer',
					alignment: 'right',
					width: '*'
				}
			],
			margin: [40, 0],
			// Only show footer after cover page
			display: currentPage === 1 ? 'none' : 'block'
		}),
		content: await buildReportContent(propertyData, fetch),
		styles,
		defaultStyle: {
			font: 'Poppins',
			fontSize: 9
		}
	};

	return new Promise((resolve, reject) => {
		try {
			const pdfDoc = printer.createPdfKitDocument(documentDefinition);
			const stream = pdfDoc.pipe(blobStream());

			stream.on('finish', function (this: any) {
				resolve(this.toBlob('application/pdf'));
			});

			pdfDoc.end();
		} catch (error) {
			reject(error);
		}
	});
}
const compactMargin: [number, number, number, number] = [0, 3, 0, 3];
const headerMargin = [5, 2, 5, 2];

function getReportStyles(): StyleDictionary {
	return {
		title_h1: {
			font: 'Poppins',
			fontSize: 22,
			bold: true,
			alignment: 'center',
			color: '#1e293b'
		},
		title_h2: {
			font: 'Inter',
			fontSize: 22,
			margin: [0, 20, 0, 20],
			alignment: 'center',
			color: '#334155'
		},
		propertyHeader: {
			font: 'Poppins',
			fontSize: 14,
			bold: true,
			color: '#1e293b',
			alignment: 'center',
			margin: [0, 10, 0, 10]
		},
		sectionHeader: {
			font: 'OpenSans',
			fontSize: 2,
			bold: true,
			fillColor: '#c2410c',
			color: 'white',
			margin: [0, 10, 0, 5]
		},
		footer: {
			font: 'Inter',
			fontSize: 8,
			color: '#64748b',
			margin: [40, 0]
		}
	};
}

async function buildReportContent(
	propertyData: any[],
	fetch: RequestEvent['fetch']
): Promise<Content[]> {
	const content: Content[] = [];

	// Cover page
	content.push(
		{
			image: getLogo(),
			width: 100, // Larger size for cover page
			alignment: 'center' as Alignment,
			margin: [0, 100, 0, 30] // More spacing for cover page
		},
		{
			text: 'RFS Property Report',
			style: 'title_h1',
			margin: [0, 0, 0, 30]
		},
		{ text: '', pageBreak: 'after' } // Force new page after cover
	);

	// Property sections
	for (const [index, property] of propertyData.entries()) {
		content.push(
			buildPropertySection(property),
			buildResidentsSection(property),
			buildHazardsSection(property),
			buildLocalHazardsSection(property),
			buildFireAssetsSection(property),
			buildAnimalsSection(property),
			// await buildPropertyMapSection(property, fetch),
			index < propertyData.length - 1 ? { text: '', pageBreak: 'after' } : { text: '' }
		);
	}

	return content;
}

function buildPropertySection(property: any): Content {
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '🏠 ', font: 'NotoEmoji' },
									{ text: 'PROPERTY DETAILS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			{
				table: {
					widths: ['25%', '*'],
					body: [
						['Address:', property.address],
						['Phone:', property.phone || 'Not provided'],
						['Identification:', property.property.identification],
						['Truck Access:', property.property.truck_access],
						['Critical Assets:', property.property.critical_assets],
						['Vulnerable Residents:', property.property.vulnerable]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}
		]
	};
}

function buildHazardsSection(property: any): Content {
	const onSiteHazards = property.onsite_hazards.on_site_hazards;
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '⚠️ ', font: 'NotoEmoji' },
									{ text: 'HAZARDS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			{
				table: {
					widths: ['25%', '*'],
					body: [
						['Solar Batteries:', onSiteHazards.Solar_batteries],
						['Fuel Stores:', onSiteHazards.Fuel_stores],
						['Chemical Stores:', onSiteHazards.Chemical_stores],
						['Bottled Gas:', onSiteHazards.Bottled_gas],
						['Other Hazards:', property.onsite_hazards.other_site_hazards]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}
		]
	};
}

function buildAnimalsSection(property: any): Content {
	const pets = property.site_animals.pets;
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '🐾 ', font: 'NotoEmoji' },
									{ text: 'ANIMALS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			{
				table: {
					widths: ['25%', '*'],
					body: [
						['Pets:', `Dogs: ${pets.dogs} | Cats: ${pets.cats} | Birds: ${pets.birds}`],
						['Other Pets:', pets.other_pets],
						['Livestock:', property.site_animals.livestock],
						['Safe Area Status:', property.site_animals.safe_area.status],
						[
							'Safe Area Availability:',
							property.site_animals.safe_area.availability || 'Not specified'
						]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}
		]
	};
}

function buildFireAssetsSection(property: any): Content {
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '🚒 ', font: 'NotoEmoji' },
									{ text: 'FIRE FIGHTING ASSETS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			{
				table: {
					widths: ['25%', '*'],
					body: [
						['Static Water:', property.fire_fighting_assets.static_water],
						['Stortz Fitting:', property.fire_fighting_assets.stortz_fitting],
						['Equipment:', property.fire_fighting_assets.equipment],
						['Firebreaks:', property.fire_fighting_assets.firebreaks],
						['Slashed APZ(s):', property.fire_fighting_assets.slashed_apz_s],
						['Backup Pump:', property.fire_fighting_assets.backup_pump],
						['Driveway Clearance:', property.fire_fighting_assets.driveway_overhead_clearance],
						['Truck Access:', property.fire_fighting_assets.truck_access_around_property]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}
		]
	};
}

function buildResidentsSection(property: any): Content {
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '👥 ', font: 'NotoEmoji' },
									{ text: 'RESIDENTS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			...property.residents.map((resident: any) => ({
				table: {
					widths: ['25%', '*'],
					body: [
						['Name:', resident.name],
						['Mobile:', resident.mobile],
						['Occupancy:', resident.resident],
						['Survival Plan:', resident.survival_plan],
						['Plan to Leave:', resident.plan_to_leave]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}))
		]
	};
}

function buildLocalHazardsSection(property: any): Content {
	return {
		stack: [
			{
				table: {
					widths: ['*'],
					body: [
						[
							{
								text: [
									{ text: '🌳 ', font: 'NotoEmoji' },
									{ text: 'LOCAL HAZARDS', font: 'Poppins', bold: true }
								],
								fillColor: '#c2410c',
								color: 'white',
								margin: headerMargin
							}
						]
					]
				},
				layout: 'noBorders'
			},
			{
				table: {
					widths: ['25%', '*'],
					body: [
						['Adjacent Land:', property.other_local_hazards.land_adjacent_hazard],
						['Other Local:', property.other_local_hazards.other_local_hazards]
					]
				},
				layout: 'lightHorizontalLines',
				margin: compactMargin
			}
		]
	};
}

// async function buildPropertyMapSection(
// 	property: any,
// 	fetch: RequestEvent['fetch']
// ): Promise<Content> {
// 	try {
// 		const mapImage = await fetch(`/api/property-map/${property.id}`);
// 		// Ensure we're getting a PNG response
// 		const contentType = mapImage.headers.get('content-type');

// 		if (contentType !== 'image/png') {
// 			// Return a placeholder or empty stack if image isn't available
// 			return {
// 				stack: [
// 					{
// 						text: 'Map not available',
// 						alignment: 'center'
// 					}
// 				]
// 			};
// 		}

// 		const imageBuffer = await mapImage.arrayBuffer();
// 		const base64String = Buffer.from(imageBuffer).toString('base64');
// 		const dataUrl = `data:image/png;base64,${base64String}`;

// 		return {
// 			stack: [
// 				{
// 					image: dataUrl,
// 					width: 500,
// 					height: 400
// 				}
// 			]
// 		};
// 	} catch (error) {
// 		// Return a placeholder if there's any error
// 		return {
// 			stack: [
// 				{
// 					text: 'Map not available',
// 					alignment: 'center'
// 				}
// 			]
// 		};
// 	}
// }
